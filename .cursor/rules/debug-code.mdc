---
description: debug-code: When compiler errors appear or runtime bugs occur
globs: 
alwaysApply: false
---
Whenever debuging code, errors, and issues, use this approach IN ORDER. do NOT skip any steps. do NOT attempt to solve the issue before doing step 1. Rpeat the rules back to me before solving anything.

Your objective is to inform me first, and then give suggestions, in a way i can decide if those are good ideas.

1. First report on what we changed and the results of the changes. Compare the build results or bugs to our last attempt, and give me an overview of what changed. Did we solve any errors? Are any errors new? And what stayed the same. Did we make progress or is it now worse?

2. Only after that, sort the errors by order of where in the chain of events the thing is. i want fix data providers first, so errors dont cascade down the chain. Prioritize build breaking errors. give me a summary of the build error report including the file path, the error, and an explanation about what the code around it is doing (for ex: "this is part of the functionXX, in this step it should be storing the... it needs this variable to...")

3. Only after all that, solve ONLY the top level issue. Make sure to check the documentation, you can find links to all files. Respect our code standards and use our logging solutions. show me the code snippet of the bug before and after your fix, and explain what data we are trying to get, and where that data can be found, and why the fix will solve the issue. Apply your solution. Make sure your solution is still doing what the comments around it say, otherwise also update the comments.