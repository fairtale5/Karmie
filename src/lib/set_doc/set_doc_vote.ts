import { formatVoteKey } from '../keys/format_key_vote';
import type { VoteData, VoteDocument } from '../types';
import type { ULID } from '../keys/ulid_types';
import { VALIDATE_VOTE_DOC } from '../settings';

/**
 * Creates a full vote document object for setDoc, using the standard key format.
 *
 * @param user_key - The voter's user ULID (ULID type)
 * @param tag_key - The tag's ULID (ULID type)
 * @param target_key - The target user's ULID (ULID type)
 * @param vote_key - The vote's ULID (ULID type, generated by function)
 * @param value - The vote value (+1 or -1)
 * @param weight - The vote weight (number, default 1.0)
 * @param validationOverride - Optional boolean to override global validation toggle
 * @returns {VoteDocument} The full vote document object, ready for setDoc
 *
 * This function:
 * - Gets the voter, tag, target, and vote ULIDs, and vote value/weight
 * - Uses formatVoteKey to generate the document key
 * - Assembles the VoteData object, including all required fields
 * - Returns the full VoteDocument object, omitting owner and only including provided fields
 * - Optionally runs frontend validation if enabled in settings
 */
export default function setDocVote({
  user_key,
  tag_key,
  target_key,
  vote_key,
  value,
  weight,
  validationOverride
}: {
  user_key: ULID;
  tag_key: ULID;
  target_key: ULID;
  vote_key: ULID;
  value: number;
  weight: number;
  validationOverride?: boolean;
}): VoteDocument {
  // Step 1: Generate the document key using the standard format
  // This key will be used for efficient queries and must be unique
  const key = formatVoteKey(user_key, tag_key, target_key, vote_key);

  // Step 2: Assemble the VoteData object, only including provided fields
  // This includes all required fields for a vote
  const data: VoteData = {
    user_key,
    tag_key,
    target_key,
    value,
    weight
  };

  // Step 3: Optionally run frontend validation if enabled
  const doValidate = validationOverride !== undefined ? validationOverride : VALIDATE_VOTE_DOC;
  if (doValidate) {
    // TODO: Implement frontend validation for vote fields (ULIDs, value, etc.)
    // For now, this is a stub
  }

  // Step 4: Return the full vote document object, omitting owner
  // The owner, created_at, updated_at, and version fields are set by Juno backend
  const doc: VoteDocument = {
    key,
    data,
    version: BigInt(0),
    created_at: BigInt(0),
    updated_at: BigInt(0)
  } as VoteDocument;
  return doc;
} 